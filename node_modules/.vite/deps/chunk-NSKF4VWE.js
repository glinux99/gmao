import {
  script as script3
} from "./chunk-J4LG2DDO.js";
import {
  script as script4
} from "./chunk-FHIF5XH7.js";
import {
  Ripple
} from "./chunk-5BDUIOX6.js";
import {
  script as script2
} from "./chunk-2GHKI5QN.js";
import {
  script
} from "./chunk-6F7PNGXP.js";
import {
  BaseStyle,
  cn
} from "./chunk-5VK4N2SS.js";
import {
  Transition,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createVNode,
  mergeProps,
  normalizeClass,
  openBlock,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  vShow,
  withCtx,
  withDirectives
} from "./chunk-HB5I462T.js";

// node_modules/@primeuix/styles/panel/index.mjs
var style = ({ dt: n }) => `
.p-panel {
    border: 1px solid ${n("panel.border.color")};
    border-radius: ${n("panel.border.radius")};
    background: ${n("panel.background")};
    color: ${n("panel.color")};
}

.p-panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: ${n("panel.header.padding")};
    background: ${n("panel.header.background")};
    color: ${n("panel.header.color")};
    border-style: solid;
    border-width: ${n("panel.header.border.width")};
    border-color: ${n("panel.header.border.color")};
    border-radius: ${n("panel.header.border.radius")};
}

.p-panel-toggleable .p-panel-header {
    padding: ${n("panel.toggleable.header.padding")};
}

.p-panel-title {
    line-height: 1;
    font-weight: ${n("panel.title.font.weight")};
}

.p-panel-content {
    padding: ${n("panel.content.padding")};
}

.p-panel-footer {
    padding: ${n("panel.footer.padding")};
}
`;

// node_modules/primevue/panel/style/index.mjs
var classes = {
  root: function root(_ref) {
    var props = _ref.props;
    return ["p-panel p-component", {
      "p-panel-toggleable": props.toggleable
    }];
  },
  header: "p-panel-header",
  title: "p-panel-title",
  headerActions: "p-panel-header-actions",
  pcToggleButton: "p-panel-toggle-button",
  contentContainer: "p-panel-content-container",
  content: "p-panel-content",
  footer: "p-panel-footer"
};
var PanelStyle = BaseStyle.extend({
  name: "panel",
  style,
  classes
});

// node_modules/primevue/panel/index.mjs
var script$1 = {
  name: "BasePanel",
  "extends": script,
  props: {
    header: String,
    toggleable: Boolean,
    collapsed: Boolean,
    toggleButtonProps: {
      type: Object,
      "default": function _default() {
        return {
          severity: "secondary",
          text: true,
          rounded: true
        };
      }
    }
  },
  style: PanelStyle,
  provide: function provide() {
    return {
      $pcPanel: this,
      $parentInstance: this
    };
  }
};
var script5 = {
  name: "Panel",
  "extends": script$1,
  inheritAttrs: false,
  emits: ["update:collapsed", "toggle"],
  data: function data() {
    return {
      d_collapsed: this.collapsed
    };
  },
  watch: {
    collapsed: function collapsed(newValue) {
      this.d_collapsed = newValue;
    }
  },
  methods: {
    toggle: function toggle(event) {
      this.d_collapsed = !this.d_collapsed;
      this.$emit("update:collapsed", this.d_collapsed);
      this.$emit("toggle", {
        originalEvent: event,
        value: this.d_collapsed
      });
    },
    onKeyDown: function onKeyDown(event) {
      if (event.code === "Enter" || event.code === "NumpadEnter" || event.code === "Space") {
        this.toggle(event);
        event.preventDefault();
      }
    }
  },
  computed: {
    buttonAriaLabel: function buttonAriaLabel() {
      return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.header;
    },
    dataP: function dataP() {
      return cn({
        toggleable: this.toggleable
      });
    }
  },
  components: {
    PlusIcon: script3,
    MinusIcon: script2,
    Button: script4
  },
  directives: {
    ripple: Ripple
  }
};
var _hoisted_1 = ["data-p"];
var _hoisted_2 = ["data-p"];
var _hoisted_3 = ["id"];
var _hoisted_4 = ["id", "aria-labelledby"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_Button = resolveComponent("Button");
  return openBlock(), createElementBlock("div", mergeProps({
    "class": _ctx.cx("root"),
    "data-p": $options.dataP
  }, _ctx.ptmi("root")), [createBaseVNode("div", mergeProps({
    "class": _ctx.cx("header"),
    "data-p": $options.dataP
  }, _ctx.ptm("header")), [renderSlot(_ctx.$slots, "header", {
    id: _ctx.$id + "_header",
    "class": normalizeClass(_ctx.cx("title"))
  }, function() {
    return [_ctx.header ? (openBlock(), createElementBlock("span", mergeProps({
      key: 0,
      id: _ctx.$id + "_header",
      "class": _ctx.cx("title")
    }, _ctx.ptm("title")), toDisplayString(_ctx.header), 17, _hoisted_3)) : createCommentVNode("", true)];
  }), createBaseVNode("div", mergeProps({
    "class": _ctx.cx("headerActions")
  }, _ctx.ptm("headerActions")), [renderSlot(_ctx.$slots, "icons"), _ctx.toggleable ? renderSlot(_ctx.$slots, "togglebutton", {
    key: 0,
    collapsed: $data.d_collapsed,
    toggleCallback: function toggleCallback(event) {
      return $options.toggle(event);
    },
    keydownCallback: function keydownCallback(event) {
      return $options.onKeyDown(event);
    }
  }, function() {
    return [createVNode(_component_Button, mergeProps({
      id: _ctx.$id + "_header",
      "class": _ctx.cx("pcToggleButton"),
      "aria-label": $options.buttonAriaLabel,
      "aria-controls": _ctx.$id + "_content",
      "aria-expanded": !$data.d_collapsed,
      unstyled: _ctx.unstyled,
      onClick: _cache[0] || (_cache[0] = function($event) {
        return $options.toggle(_ctx.event);
      }),
      onKeydown: _cache[1] || (_cache[1] = function($event) {
        return $options.onKeyDown(_ctx.event);
      })
    }, _ctx.toggleButtonProps, {
      pt: _ctx.ptm("pcToggleButton")
    }), {
      icon: withCtx(function(slotProps) {
        return [renderSlot(_ctx.$slots, _ctx.$slots.toggleicon ? "toggleicon" : "togglericon", {
          collapsed: $data.d_collapsed
        }, function() {
          return [(openBlock(), createBlock(resolveDynamicComponent($data.d_collapsed ? "PlusIcon" : "MinusIcon"), mergeProps({
            "class": slotProps["class"]
          }, _ctx.ptm("pcToggleButton")["icon"]), null, 16, ["class"]))];
        })];
      }),
      _: 3
    }, 16, ["id", "class", "aria-label", "aria-controls", "aria-expanded", "unstyled", "pt"])];
  }) : createCommentVNode("", true)], 16)], 16, _hoisted_2), createVNode(Transition, mergeProps({
    name: "p-toggleable-content"
  }, _ctx.ptm("transition")), {
    "default": withCtx(function() {
      return [withDirectives(createBaseVNode("div", mergeProps({
        id: _ctx.$id + "_content",
        "class": _ctx.cx("contentContainer"),
        role: "region",
        "aria-labelledby": _ctx.$id + "_header"
      }, _ctx.ptm("contentContainer")), [createBaseVNode("div", mergeProps({
        "class": _ctx.cx("content")
      }, _ctx.ptm("content")), [renderSlot(_ctx.$slots, "default")], 16), _ctx.$slots.footer ? (openBlock(), createElementBlock("div", mergeProps({
        key: 0,
        "class": _ctx.cx("footer")
      }, _ctx.ptm("footer")), [renderSlot(_ctx.$slots, "footer")], 16)) : createCommentVNode("", true)], 16, _hoisted_4), [[vShow, !$data.d_collapsed]])];
    }),
    _: 3
  }, 16)], 16, _hoisted_1);
}
script5.render = render;

export {
  PanelStyle,
  script5 as script
};
//# sourceMappingURL=chunk-NSKF4VWE.js.map
