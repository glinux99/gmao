{
  "version": 3,
  "sources": ["../../src/metergroup/style/MeterGroupStyle.js", "../../src/metergroup/BaseMeterGroup.vue", "../../src/metergroup/MeterGroupLabel.vue", "../../src/metergroup/MeterGroupLabel.vue", "../../src/metergroup/MeterGroup.vue", "../../src/metergroup/MeterGroup.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/metergroup';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: ({ props }) => [\n        'p-metergroup p-component',\n        {\n            'p-metergroup-horizontal': props.orientation === 'horizontal',\n            'p-metergroup-vertical': props.orientation === 'vertical'\n        }\n    ],\n    meters: 'p-metergroup-meters',\n    meter: 'p-metergroup-meter',\n    labelList: ({ props }) => [\n        'p-metergroup-label-list',\n        {\n            'p-metergroup-label-list-vertical': props.labelOrientation === 'vertical',\n            'p-metergroup-label-list-horizontal': props.labelOrientation === 'horizontal'\n        }\n    ],\n    label: 'p-metergroup-label',\n    labelIcon: 'p-metergroup-label-icon',\n    labelMarker: 'p-metergroup-label-marker',\n    labelText: 'p-metergroup-label-text'\n};\n\nexport default BaseStyle.extend({\n    name: 'metergroup',\n    style,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport MeterGroupStyle from 'primevue/metergroup/style';\n\nexport default {\n    name: 'MeterGroup',\n    extends: BaseComponent,\n    props: {\n        value: {\n            type: Array,\n            default: null\n        },\n        min: {\n            type: Number,\n            default: 0\n        },\n        max: {\n            type: Number,\n            default: 100\n        },\n        orientation: {\n            type: String,\n            default: 'horizontal'\n        },\n        labelPosition: {\n            type: String,\n            default: 'end'\n        },\n        labelOrientation: {\n            type: String,\n            default: 'horizontal'\n        }\n    },\n    style: MeterGroupStyle,\n    provide() {\n        return {\n            $pcMeterGroup: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <ol :class=\"cx('labelList')\" :data-p=\"dataP\" v-bind=\"ptm('labelList')\">\n        <li v-for=\"(val, index) in value\" :key=\"index + '_label'\" :class=\"cx('label')\" v-bind=\"ptm('label')\">\n            <slot name=\"icon\" :value=\"val\" :class=\"cx('labelIcon')\">\n                <i v-if=\"val.icon\" :class=\"[val.icon, cx('labelIcon')]\" :style=\"{ color: val.color }\" v-bind=\"ptm('labelIcon')\" />\n                <span v-else :class=\"cx('labelMarker')\" :style=\"{ backgroundColor: val.color }\" v-bind=\"ptm('labelMarker')\" />\n            </slot>\n            <span :class=\"cx('labelText')\" v-bind=\"ptm('labelText')\">{{ val.label }} ({{ $parentInstance.percentValue(val.value) }})</span>\n        </li>\n    </ol>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport BaseComponent from '@primevue/core/basecomponent';\n\nexport default {\n    name: 'MeterGroupLabel',\n    hostName: 'MeterGroup',\n    extends: BaseComponent,\n    inheritAttrs: false,\n    inject: ['$pcMeterGroup'],\n    props: {\n        value: {\n            type: Array,\n            default: null\n        },\n        labelPosition: {\n            type: String,\n            default: 'end'\n        },\n        labelOrientation: {\n            type: String,\n            default: 'horizontal'\n        }\n    },\n    computed: {\n        dataP() {\n            return cn({\n                [this.$pcMeterGroup.labelOrientation]: this.$pcMeterGroup.labelOrientation\n            });\n        }\n    }\n};\n</script>\n", "<template>\n    <ol :class=\"cx('labelList')\" :data-p=\"dataP\" v-bind=\"ptm('labelList')\">\n        <li v-for=\"(val, index) in value\" :key=\"index + '_label'\" :class=\"cx('label')\" v-bind=\"ptm('label')\">\n            <slot name=\"icon\" :value=\"val\" :class=\"cx('labelIcon')\">\n                <i v-if=\"val.icon\" :class=\"[val.icon, cx('labelIcon')]\" :style=\"{ color: val.color }\" v-bind=\"ptm('labelIcon')\" />\n                <span v-else :class=\"cx('labelMarker')\" :style=\"{ backgroundColor: val.color }\" v-bind=\"ptm('labelMarker')\" />\n            </slot>\n            <span :class=\"cx('labelText')\" v-bind=\"ptm('labelText')\">{{ val.label }} ({{ $parentInstance.percentValue(val.value) }})</span>\n        </li>\n    </ol>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport BaseComponent from '@primevue/core/basecomponent';\n\nexport default {\n    name: 'MeterGroupLabel',\n    hostName: 'MeterGroup',\n    extends: BaseComponent,\n    inheritAttrs: false,\n    inject: ['$pcMeterGroup'],\n    props: {\n        value: {\n            type: Array,\n            default: null\n        },\n        labelPosition: {\n            type: String,\n            default: 'end'\n        },\n        labelOrientation: {\n            type: String,\n            default: 'horizontal'\n        }\n    },\n    computed: {\n        dataP() {\n            return cn({\n                [this.$pcMeterGroup.labelOrientation]: this.$pcMeterGroup.labelOrientation\n            });\n        }\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" role=\"meter\" :aria-valuemin=\"min\" :aria-valuemax=\"max\" :aria-valuenow=\"totalPercent\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <slot v-if=\"labelPosition === 'start'\" name=\"label\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\">\n            <MeterGroupLabel :value=\"value\" :labelPosition=\"labelPosition\" :labelOrientation=\"labelOrientation\" :unstyled=\"unstyled\" :pt=\"pt\" />\n        </slot>\n        <slot name=\"start\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\" />\n        <div :class=\"cx('meters')\" :data-p=\"dataP\" v-bind=\"ptm('meters')\">\n            <template v-for=\"(val, index) in value\" :key=\"index\">\n                <slot name=\"meter\" :value=\"val\" :index=\"index\" :class=\"cx('meter')\" :orientation=\"orientation\" :size=\"percentValue(val.value)\" :totalPercent=\"totalPercent\">\n                    <span v-if=\"percent(val.value)\" :class=\"cx('meter')\" :style=\"meterCalculatedStyles(val)\" :data-p=\"dataP\" v-bind=\"getPTOptions('meter', val, index)\" />\n                </slot>\n            </template>\n        </div>\n        <slot name=\"end\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\" />\n        <slot v-if=\"labelPosition === 'end'\" name=\"label\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\">\n            <MeterGroupLabel :value=\"value\" :labelPosition=\"labelPosition\" :labelOrientation=\"labelOrientation\" :unstyled=\"unstyled\" :pt=\"pt\" />\n        </slot>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport BaseMeterGroup from './BaseMeterGroup.vue';\nimport MeterGroupLabel from './MeterGroupLabel.vue';\n\nexport default {\n    name: 'MeterGroup',\n    extends: BaseMeterGroup,\n    inheritAttrs: false,\n    methods: {\n        getPTOptions(key, value, index) {\n            return this.ptm(key, {\n                context: {\n                    value,\n                    index\n                }\n            });\n        },\n        percent(meter = 0) {\n            const percentOfItem = ((meter - this.min) / (this.max - this.min)) * 100;\n\n            return Math.round(Math.max(0, Math.min(100, percentOfItem)));\n        },\n        percentValue(meter) {\n            return this.percent(meter) + '%';\n        },\n        meterCalculatedStyles(val) {\n            return {\n                backgroundColor: val.color,\n                width: this.orientation === 'horizontal' && this.percentValue(val.value),\n                height: this.orientation === 'vertical' && this.percentValue(val.value)\n            };\n        }\n    },\n    computed: {\n        totalPercent() {\n            return this.percent(this.value.reduce((total, val) => total + val.value, 0));\n        },\n        percentages() {\n            let sum = 0;\n            const sumsArray = [];\n\n            this.value.forEach((item) => {\n                sum += item.value;\n                sumsArray.push(sum);\n            });\n\n            return sumsArray;\n        },\n        dataP() {\n            return cn({\n                [this.orientation]: this.orientation\n            });\n        }\n    },\n    components: {\n        MeterGroupLabel\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" role=\"meter\" :aria-valuemin=\"min\" :aria-valuemax=\"max\" :aria-valuenow=\"totalPercent\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <slot v-if=\"labelPosition === 'start'\" name=\"label\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\">\n            <MeterGroupLabel :value=\"value\" :labelPosition=\"labelPosition\" :labelOrientation=\"labelOrientation\" :unstyled=\"unstyled\" :pt=\"pt\" />\n        </slot>\n        <slot name=\"start\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\" />\n        <div :class=\"cx('meters')\" :data-p=\"dataP\" v-bind=\"ptm('meters')\">\n            <template v-for=\"(val, index) in value\" :key=\"index\">\n                <slot name=\"meter\" :value=\"val\" :index=\"index\" :class=\"cx('meter')\" :orientation=\"orientation\" :size=\"percentValue(val.value)\" :totalPercent=\"totalPercent\">\n                    <span v-if=\"percent(val.value)\" :class=\"cx('meter')\" :style=\"meterCalculatedStyles(val)\" :data-p=\"dataP\" v-bind=\"getPTOptions('meter', val, index)\" />\n                </slot>\n            </template>\n        </div>\n        <slot name=\"end\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\" />\n        <slot v-if=\"labelPosition === 'end'\" name=\"label\" :value=\"value\" :totalPercent=\"totalPercent\" :percentages=\"percentages\">\n            <MeterGroupLabel :value=\"value\" :labelPosition=\"labelPosition\" :labelOrientation=\"labelOrientation\" :unstyled=\"unstyled\" :pt=\"pt\" />\n        </slot>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport BaseMeterGroup from './BaseMeterGroup.vue';\nimport MeterGroupLabel from './MeterGroupLabel.vue';\n\nexport default {\n    name: 'MeterGroup',\n    extends: BaseMeterGroup,\n    inheritAttrs: false,\n    methods: {\n        getPTOptions(key, value, index) {\n            return this.ptm(key, {\n                context: {\n                    value,\n                    index\n                }\n            });\n        },\n        percent(meter = 0) {\n            const percentOfItem = ((meter - this.min) / (this.max - this.min)) * 100;\n\n            return Math.round(Math.max(0, Math.min(100, percentOfItem)));\n        },\n        percentValue(meter) {\n            return this.percent(meter) + '%';\n        },\n        meterCalculatedStyles(val) {\n            return {\n                backgroundColor: val.color,\n                width: this.orientation === 'horizontal' && this.percentValue(val.value),\n                height: this.orientation === 'vertical' && this.percentValue(val.value)\n            };\n        }\n    },\n    computed: {\n        totalPercent() {\n            return this.percent(this.value.reduce((total, val) => total + val.value, 0));\n        },\n        percentages() {\n            let sum = 0;\n            const sumsArray = [];\n\n            this.value.forEach((item) => {\n                sum += item.value;\n                sumsArray.push(sum);\n            });\n\n            return sumsArray;\n        },\n        dataP() {\n            return cn({\n                [this.orientation]: this.orientation\n            });\n        }\n    },\n    components: {\n        MeterGroupLabel\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "_ref", "props", "orientation", "meters", "meter", "labelList", "_ref2", "labelOrientation", "label", "labelIcon", "labelMarker", "labelText", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "value", "type", "Array", "min", "Number", "max", "orientation", "String", "labelPosition", "labelOrientation", "style", "MeterGroupStyle", "provide", "$pcMeterGroup", "$parentInstance", "hostName", "inheritAttrs", "inject", "computed", "dataP", "cn", "_defineProperty", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "$options", "ptm", "_Fragment", "_renderList", "$props", "val", "index", "key", "_renderSlot", "$slots", "icon", "color", "backgroundColor", "_createElementVNode", "_toDisplayString", "label", "percentValue", "script", "BaseMeterGroup", "methods", "getPTOptions", "context", "percent", "meter", "arguments", "length", "undefined", "percentOfItem", "Math", "round", "meterCalculatedStyles", "width", "height", "totalPercent", "reduce", "total", "percentages", "sum", "sumsArray", "forEach", "item", "push", "components", "MeterGroupLabel", "role", "ptmi", "_createVNode", "_component_MeterGroupLabel", "unstyled", "pt", "size", "_hoisted_3"]
}
