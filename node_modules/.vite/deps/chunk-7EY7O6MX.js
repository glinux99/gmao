import {
  script as script2
} from "./chunk-VQOZXFAC.js";
import {
  script
} from "./chunk-6F7PNGXP.js";
import {
  BaseStyle,
  cn
} from "./chunk-5VK4N2SS.js";
import {
  createBlock,
  createCommentVNode,
  createElementBlock,
  mergeProps,
  openBlock,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString
} from "./chunk-HB5I462T.js";

// node_modules/@primeuix/styles/chip/index.mjs
var style = ({ dt: i }) => `
.p-chip {
    display: inline-flex;
    align-items: center;
    background: ${i("chip.background")};
    color: ${i("chip.color")};
    border-radius: ${i("chip.border.radius")};
    padding-block: ${i("chip.padding.y")};
    padding-inline: ${i("chip.padding.x")};
    gap: ${i("chip.gap")};
}

.p-chip-icon {
    color: ${i("chip.icon.color")};
    font-size: ${i("chip.icon.font.size")};
    width: ${i("chip.icon.size")};
    height: ${i("chip.icon.size")};
}

.p-chip-image {
    border-radius: 50%;
    width: ${i("chip.image.width")};
    height: ${i("chip.image.height")};
    margin-inline-start: calc(-1 * ${i("chip.padding.y")});
}

.p-chip:has(.p-chip-remove-icon) {
    padding-inline-end: ${i("chip.padding.y")};
}

.p-chip:has(.p-chip-image) {
    padding-block-start: calc(${i("chip.padding.y")} / 2);
    padding-block-end: calc(${i("chip.padding.y")} / 2);
}

.p-chip-remove-icon {
    cursor: pointer;
    font-size: ${i("chip.remove.icon.size")};
    width: ${i("chip.remove.icon.size")};
    height: ${i("chip.remove.icon.size")};
    color: ${i("chip.remove.icon.color")};
    border-radius: 50%;
    transition: outline-color ${i("chip.transition.duration")}, box-shadow ${i("chip.transition.duration")};
    outline-color: transparent;
}

.p-chip-remove-icon:focus-visible {
    box-shadow: ${i("chip.remove.icon.focus.ring.shadow")};
    outline: ${i("chip.remove.icon.focus.ring.width")} ${i("chip.remove.icon.focus.ring.style")} ${i("chip.remove.icon.focus.ring.color")};
    outline-offset: ${i("chip.remove.icon.focus.ring.offset")};
}
`;

// node_modules/primevue/chip/style/index.mjs
var classes = {
  root: "p-chip p-component",
  image: "p-chip-image",
  icon: "p-chip-icon",
  label: "p-chip-label",
  removeIcon: "p-chip-remove-icon"
};
var ChipStyle = BaseStyle.extend({
  name: "chip",
  style,
  classes
});

// node_modules/primevue/chip/index.mjs
var script$1 = {
  name: "BaseChip",
  "extends": script,
  props: {
    label: {
      type: [String, Number],
      "default": null
    },
    icon: {
      type: String,
      "default": null
    },
    image: {
      type: String,
      "default": null
    },
    removable: {
      type: Boolean,
      "default": false
    },
    removeIcon: {
      type: String,
      "default": void 0
    }
  },
  style: ChipStyle,
  provide: function provide() {
    return {
      $pcChip: this,
      $parentInstance: this
    };
  }
};
var script3 = {
  name: "Chip",
  "extends": script$1,
  inheritAttrs: false,
  emits: ["remove"],
  data: function data() {
    return {
      visible: true
    };
  },
  methods: {
    onKeydown: function onKeydown(event) {
      if (event.key === "Enter" || event.key === "Backspace") {
        this.close(event);
      }
    },
    close: function close(event) {
      this.visible = false;
      this.$emit("remove", event);
    }
  },
  computed: {
    dataP: function dataP() {
      return cn({
        removable: this.removable
      });
    }
  },
  components: {
    TimesCircleIcon: script2
  }
};
var _hoisted_1 = ["aria-label", "data-p"];
var _hoisted_2 = ["src"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return $data.visible ? (openBlock(), createElementBlock("div", mergeProps({
    key: 0,
    "class": _ctx.cx("root"),
    "aria-label": _ctx.label
  }, _ctx.ptmi("root"), {
    "data-p": $options.dataP
  }), [renderSlot(_ctx.$slots, "default", {}, function() {
    return [_ctx.image ? (openBlock(), createElementBlock("img", mergeProps({
      key: 0,
      src: _ctx.image
    }, _ctx.ptm("image"), {
      "class": _ctx.cx("image")
    }), null, 16, _hoisted_2)) : _ctx.$slots.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.icon), mergeProps({
      key: 1,
      "class": _ctx.cx("icon")
    }, _ctx.ptm("icon")), null, 16, ["class"])) : _ctx.icon ? (openBlock(), createElementBlock("span", mergeProps({
      key: 2,
      "class": [_ctx.cx("icon"), _ctx.icon]
    }, _ctx.ptm("icon")), null, 16)) : createCommentVNode("", true), _ctx.label ? (openBlock(), createElementBlock("div", mergeProps({
      key: 3,
      "class": _ctx.cx("label")
    }, _ctx.ptm("label")), toDisplayString(_ctx.label), 17)) : createCommentVNode("", true)];
  }), _ctx.removable ? renderSlot(_ctx.$slots, "removeicon", {
    key: 0,
    removeCallback: $options.close,
    keydownCallback: $options.onKeydown
  }, function() {
    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.removeIcon ? "span" : "TimesCircleIcon"), mergeProps({
      "class": [_ctx.cx("removeIcon"), _ctx.removeIcon],
      onClick: $options.close,
      onKeydown: $options.onKeydown
    }, _ctx.ptm("removeIcon")), null, 16, ["class", "onClick", "onKeydown"]))];
  }) : createCommentVNode("", true)], 16, _hoisted_1)) : createCommentVNode("", true);
}
script3.render = render;

export {
  ChipStyle,
  script3 as script
};
//# sourceMappingURL=chunk-7EY7O6MX.js.map
