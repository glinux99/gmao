{
  "version": 3,
  "sources": ["../../src/panel/style/PanelStyle.js", "../../src/panel/BasePanel.vue", "../../src/panel/Panel.vue", "../../src/panel/Panel.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/panel';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: ({ props }) => [\n        'p-panel p-component',\n        {\n            'p-panel-toggleable': props.toggleable\n        }\n    ],\n    header: 'p-panel-header',\n    title: 'p-panel-title',\n    headerActions: 'p-panel-header-actions',\n    pcToggleButton: 'p-panel-toggle-button',\n    contentContainer: 'p-panel-content-container',\n    content: 'p-panel-content',\n    footer: 'p-panel-footer'\n};\n\nexport default BaseStyle.extend({\n    name: 'panel',\n    style,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport PanelStyle from 'primevue/panel/style';\n\nexport default {\n    name: 'BasePanel',\n    extends: BaseComponent,\n    props: {\n        header: String,\n        toggleable: Boolean,\n        collapsed: Boolean,\n        toggleButtonProps: {\n            type: Object,\n            default: () => {\n                return {\n                    severity: 'secondary',\n                    text: true,\n                    rounded: true\n                };\n            }\n        }\n    },\n    style: PanelStyle,\n    provide() {\n        return {\n            $pcPanel: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <div :class=\"cx('header')\" :data-p=\"dataP\" v-bind=\"ptm('header')\">\n            <slot :id=\"$id + '_header'\" name=\"header\" :class=\"cx('title')\">\n                <span v-if=\"header\" :id=\"$id + '_header'\" :class=\"cx('title')\" v-bind=\"ptm('title')\">{{ header }}</span>\n            </slot>\n            <div :class=\"cx('headerActions')\" v-bind=\"ptm('headerActions')\">\n                <slot name=\"icons\"></slot>\n                <slot v-if=\"toggleable\" name=\"togglebutton\" :collapsed=\"d_collapsed\" :toggleCallback=\"(event) => toggle(event)\" :keydownCallback=\"(event) => onKeyDown(event)\">\n                    <Button\n                        :id=\"$id + '_header'\"\n                        :class=\"cx('pcToggleButton')\"\n                        :aria-label=\"buttonAriaLabel\"\n                        :aria-controls=\"$id + '_content'\"\n                        :aria-expanded=\"!d_collapsed\"\n                        :unstyled=\"unstyled\"\n                        @click=\"toggle(event)\"\n                        @keydown=\"onKeyDown(event)\"\n                        v-bind=\"toggleButtonProps\"\n                        :pt=\"ptm('pcToggleButton')\"\n                    >\n                        <template #icon=\"slotProps\">\n                            <!--TODO: togglericon deprecated since v4.0-->\n                            <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\">\n                                <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"slotProps.class\" v-bind=\"ptm('pcToggleButton')['icon']\" />\n                            </slot>\n                        </template>\n                    </Button>\n                </slot>\n            </div>\n        </div>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"$id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"$id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n                <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n                    <slot name=\"footer\"></slot>\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Button from 'primevue/button';\nimport Ripple from 'primevue/ripple';\nimport BasePanel from './BasePanel.vue';\n\nexport default {\n    name: 'Panel',\n    extends: BasePanel,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.header;\n        },\n        dataP() {\n            return cn({\n                toggleable: this.toggleable\n            });\n        }\n    },\n    components: {\n        PlusIcon,\n        MinusIcon,\n        Button\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :data-p=\"dataP\" v-bind=\"ptmi('root')\">\n        <div :class=\"cx('header')\" :data-p=\"dataP\" v-bind=\"ptm('header')\">\n            <slot :id=\"$id + '_header'\" name=\"header\" :class=\"cx('title')\">\n                <span v-if=\"header\" :id=\"$id + '_header'\" :class=\"cx('title')\" v-bind=\"ptm('title')\">{{ header }}</span>\n            </slot>\n            <div :class=\"cx('headerActions')\" v-bind=\"ptm('headerActions')\">\n                <slot name=\"icons\"></slot>\n                <slot v-if=\"toggleable\" name=\"togglebutton\" :collapsed=\"d_collapsed\" :toggleCallback=\"(event) => toggle(event)\" :keydownCallback=\"(event) => onKeyDown(event)\">\n                    <Button\n                        :id=\"$id + '_header'\"\n                        :class=\"cx('pcToggleButton')\"\n                        :aria-label=\"buttonAriaLabel\"\n                        :aria-controls=\"$id + '_content'\"\n                        :aria-expanded=\"!d_collapsed\"\n                        :unstyled=\"unstyled\"\n                        @click=\"toggle(event)\"\n                        @keydown=\"onKeyDown(event)\"\n                        v-bind=\"toggleButtonProps\"\n                        :pt=\"ptm('pcToggleButton')\"\n                    >\n                        <template #icon=\"slotProps\">\n                            <!--TODO: togglericon deprecated since v4.0-->\n                            <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\">\n                                <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"slotProps.class\" v-bind=\"ptm('pcToggleButton')['icon']\" />\n                            </slot>\n                        </template>\n                    </Button>\n                </slot>\n            </div>\n        </div>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"$id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"$id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n                <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n                    <slot name=\"footer\"></slot>\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Button from 'primevue/button';\nimport Ripple from 'primevue/ripple';\nimport BasePanel from './BasePanel.vue';\n\nexport default {\n    name: 'Panel',\n    extends: BasePanel,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.header;\n        },\n        dataP() {\n            return cn({\n                toggleable: this.toggleable\n            });\n        }\n    },\n    components: {\n        PlusIcon,\n        MinusIcon,\n        Button\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "_ref", "props", "toggleable", "header", "title", "headerActions", "pcToggleButton", "contentContainer", "content", "footer", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "header", "String", "toggleable", "Boolean", "collapsed", "toggleButtonProps", "type", "Object", "default", "severity", "text", "rounded", "style", "PanelStyle", "provide", "$pcPanel", "$parentInstance", "script", "BasePanel", "inheritAttrs", "emits", "data", "d_collapsed", "watch", "newValue", "methods", "toggle", "event", "$emit", "originalEvent", "value", "onKeyDown", "code", "preventDefault", "computed", "buttonAriaLabel", "ariaLabel", "dataP", "cn", "components", "PlusIcon", "MinusIcon", "Button", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "$options", "ptmi", "_createElementVNode", "ptm", "_renderSlot", "$slots", "id", "$id", "$data", "toggleCallback", "keydownCallback", "_createVNode", "_component_Button", "unstyled", "onClick", "_cache", "$event", "onKeydown", "pt", "icon", "_withCtx", "slotProps", "toggleicon", "_createBlock", "_resolveDynamicComponent", "_Transition", "_withDirectives", "role", "footer"]
}
